generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Size {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  OrderItem             OrderItem[]
  ProductColorSizeStock ProductColorSizeStock[]
}

model Color {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  OrderItem             OrderItem[]
  ProductColorSizeStock ProductColorSizeStock[]
}

model Product {
  id                    String                  @id @default(uuid())
  title                 String
  description           String
  slug                  String                  @unique
  tags                  String[]                @default([])
  gender                Gender
  category              Category
  discount              Float?                  @default(0)
  OrderItem             OrderItem[]
  ProductColorSizeStock ProductColorSizeStock[]
  ProductImage          ProductImage[]

  @@index([gender])
}

model ProductColorSizeStock {
  productId String
  colorId   Int
  sizeId    Int
  stock     Int
  price     Float   @default(0)
  color     Color   @relation(fields: [colorId], references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      Size    @relation(fields: [sizeId], references: [id])

  @@id([productId, colorId, sizeId])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Country {
  id           String         @id
  name         String
  OrderAddress OrderAddress[]
  UserAddress  UserAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String
  countryId  String
  userId     String  @unique
  country    Country @relation(fields: [countryId], references: [id])
  user       User    @relation(fields: [userId], references: [id])
}

model Order {
  id            String        @id @default(uuid())
  subTotal      Float
  tax           Float
  total         Float
  itemsInOrder  Int
  isPaid        Boolean       @default(false)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  transactionId String?
  user          User          @relation(fields: [userId], references: [id])
  OrderAddress  OrderAddress?
  OrderItem     OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  sizeId    Int
  colorId   Int
  color     Color   @relation(fields: [colorId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  size      Size    @relation(fields: [sizeId], references: [id])
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String
  countryId  String
  orderId    String  @unique
  country    Country @relation(fields: [countryId], references: [id])
  Order      Order   @relation(fields: [orderId], references: [id])
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(uuid())
  name          String?
  password      String?
  isActive      Boolean      @default(true)
  email         String       @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(user)
  accounts      Account[]
  Order         Order[]
  sessions      Session[]
  address       UserAddress?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Gender {
  hombre
  mujer
  sex_shop
}

enum Category {
  Boxers
  Soutiens
  Bodys
  Corseteria
  Bombachas
  Portaligas
  Bikinis_Swinwear
  Pijamas_Homewear
  Accesorios
  Para_ellos
  Para_ellas
  Pugs
  Disfraces
  Lubricantes
  Juegos
}

enum Role {
  admin
  user
}
