generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Size {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  ProductColorSizeStock ProductColorSizeStock[]
  OrderItem             OrderItem[]
}

model Color {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  ProductColorSizeStock ProductColorSizeStock[]
  OrderItem             OrderItem[]
}

enum Gender {
  hombre
  mujer
  sex_shop
}

enum Category {
  Boxers
  Soutiens
  Bodys
  Corseteria
  Bombachas
  Portaligas
  Bikinis_Swinwear
  Pijamas_Homewear
  Accesorios
  Para_ellos
  Para_ellas
  Pugs
  Disfraces
  Lubricantes
  Juegos
}

enum Role {
  admin
  user
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender
  category    Category

  // Relaciones

  ProductImage          ProductImage[]
  OrderItem             OrderItem[]
  ProductColorSizeStock ProductColorSizeStock[]

  @@index([gender])
}

model ProductColorSizeStock {
  product   Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId String
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   Int
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    Int
  stock     Int
  price     Float   @default(0)

  @@id([productId, colorId, sizeId])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId String
}

model Country {
  id   String @id
  name String

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Order de compras
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    Int
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   Int
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}


// Auth.js

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  isActive      Boolean   @default(true)
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)
  address UserAddress?

  //Relaciones

  accounts      Account[]
  sessions      Session[]
  Order Order[]
}

model VerificationToken {
  
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Auth.js